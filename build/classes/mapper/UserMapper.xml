<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，
	可以理解为sql隔离 
	使用mapper代理方法开发，namespace有特殊重要的作用，namespace等于mapper接口地址。
-->
<mapper namespace="com.zcy.mapper.UserMapper">
	<!-- 在映射文件中配置很多sql语句 -->
	<!-- 需求：通过id查询用户表的记录 -->
	<!-- 通过select执行数据库查询
	id:标识映射文件中的sql,将sql语句封装到mappedStatement对象中，
	所以将id称为statement的id.	
	parameterType:指定输入参数的类型，这里指定int型
	#{}表示一个占位符。
	#{id}:其中的id表示接收输入的参数，参数名称就是id，
	如果输入参数是简单类型，#{}中的参数名可以任意，也可以是value或其他名称。
	resultType:指定sql输出结果所映射的java对象类型，
	select指定resultType表示将单条记录映射成的java对象。
	 -->
	<select id="findUserById" parameterType="int" resultType="user">
		select * from user where id=#{id}
	</select>
	
	<!-- 根据用户名称模糊查询用户信息,可能返回多条
	resultType:指定就是单条记录所映射的java对象类型
	${}:表示拼接sql串，将接收到的参数内容不加任何修饰拼接在sql中，
	使用${}拼接sql，要注意两点
	1.${value}：接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value
	2.使用${}拼接sql，会引起sql注入
	 -->
	<select id="findUserByName" parameterType="java.lang.String" 
			resultType="com.zcy.pojo.User">
		select * from user where username like '%${value}%'
	</select>
	
	<!-- 添加用户 
	parameterType:指定输入参数类型是pojo（包括用户信息）
	#{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过ognl获取对象的属性值
	id是自增的，不用特别插入
	-->
	<insert id="insertUser" parameterType="com.zcy.pojo.User">
		<!-- 将插入的主键返回，返回到user对象中
		select last_insert_id():得到刚insert进去记录的主键值，只适用于自增主键
		keyProperty：将查询到主键值设置到parameterType指定的对象的那个属性
		order:select last_insert_id执行顺序，相对于insert语句来说它的执行顺序
		resultType:指定select last_insert_id()的结果类型
		如果不加selectKey的话，user.getId()返回值为0
		-->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			select last_insert_id()
		</selectKey>
		insert into user(username,birthday,sex,address) 
		value(#{username},#{birthday},#{sex},#{address})
	</insert>
	
	<!-- 删除用户
	根据id删除用户，需要输入id值
	-->
	<delete id="deleteUser" parameterType="java.lang.Integer">
		delete from user where id=#{id}
	</delete> 
	
	<!-- 根据id更新用户 
	分析：需要传入用户的id和用户的更新信息
	parameterType指定user对象，包括id和更新信息，注意:id必须存在
	#{id}:从输入user对象中获取id属性值
	-->
	<update id="updateUser" parameterType="com.zcy.pojo.User">
		update user set username=#{username},birthday=#{birthday},
		sex=#{sex},address=#{address} where id=#{id}
	</update>
</mapper>