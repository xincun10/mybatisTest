<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，
	可以理解为sql隔离 
	使用mapper代理方法开发，namespace有特殊重要的作用，namespace等于mapper接口地址。
-->
<mapper namespace="com.zcy.mapper.UserMapper">

	<!-- 开启本mapper的namespace下的二级缓存 
	type:指定cache接口的实现类的类型，mybatis默认使用PerpetualCache
	要和ehcache整合，需要配置type为ehcache实现cache接口的类型
	-->
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>

	<!-- 定义sql片段
	id：sql片段的唯一标识
	经验：是基于单表来定义sql片段，这样的话这个sql片段的可重用性才高
	在sql片段中不要包括where
	 -->
	<sql id="query_user_where">
		<if test="userCustom!=null">
			<if test="userCustom.sex!=null and userCustom.sex!=''">
				and user.sex=#{userCustom.sex}
			</if>
			<if test="userCustom.username!=null and userCustom.username!=''">
				and user.username like '%${userCustom.username}%'
			</if>
			<if test="ids!=null">
				<!-- 使用foreach遍历传入ids 
				collection:指定输入对象中集合属性
				item：每个遍历生成对象
				open：开始遍历时拼接的串
				close：结束遍历时拼接的串
				separator：遍历的两个对象中需要拼接的串
				-->
				<!-- 使用下面的sql拼接
				and (id=1 or id=2 or id=3)
				-->
				<foreach collection="ids" item="user_id" open="and (" 
							close=")" separator="or">
					<!-- 每个遍历需要拼接的串 -->
					id=#{user_id}
				</foreach>
				<!-- 使用下面的sql拼接
				and id in(1,2,3)
				-->
				<!-- <foreach collection="ids" item="user_id" open="and id in(" 
							close=")" separator=",">
					每个遍历需要拼接的串
					#{user_id}
				</foreach> -->
			</if>
		</if>
	</sql>

	<!-- 定义resultMap
	将select id id_,username username_ from user和user类中的属性做一个映射关系。
	type:resultMap最终映射的java对象类型，可以使用别名
	id:对resultMap的唯一标识
	 -->
	<resultMap type="user" id="userResultMap">
		<!-- id表示查询结果集中的唯一标识
		column：查询出来的列名
		property:type指定的pojo类型中的属性名
		最终resultMap对column和property作一个映射关系（对应关系）
		 -->
		<id column="id_" property="id"/>
		<!-- result:对普通名映射定义
		column：查询出来的列名
		property：type指定的pojo类型中的属性名
		最终resultMap对column和property做一个映射关系
		 -->
		<result column="username_" property="username"/>
	</resultMap>

	<!-- 使用resultMap进行输出映射 
	resultMap:指定定义的resultMap的id，如果这个resultMap在其它的mapper文件。
	前面需要加namespace。
	-->
	<select id="findUserByIdResultMap" parameterType="int" 
			resultMap="userResultMap">
		select id id_,username username_ from user where id=#{value}		
	</select>

	<!-- 用户信息综合查询总数
	parameterType:指定输入类型和findUserList一样
	resultType:输出结果类型
	 -->
	<select id="findUserCount" parameterType="com.zcy.pojo.UserQueryVo"
			resultType="int">
		select count(*) from user
		<where>
			<if test="userCustom!=null">
				<if test="userCustom.sex!=null and userCustom.sex!=''">
					and user.sex=#{userCustom.sex}
				</if>
				<if test="userCustom.username!=null and userCustom.username!=''">
					and user.username like '%${userCustom.username}%'
				</if>
			</if>
		</where>
	</select>

	<!-- 用户信息综合查询 
	#{userCustomer.sex}:取出pojo包装对象中性别值
	${userCustomer.username}:取出pojo包装对象中用户名称
	-->
	<select id="findUserList" parameterType="com.zcy.pojo.UserQueryVo"
			resultType="com.zcy.pojo.UserCustom">
		select * from user 
		<!-- where可以自动去掉条件中的第一个and -->
		<where>
			<!-- 引用sql片段的id，如果refid指定的id不在本mapper文件中，
			需要在前面加namespace
			-->
			<include refid="query_user_where"></include>
			<!-- 这里可能会引用其他的sql片段 -->
		</where>
	</select>
	<!-- 在映射文件中配置很多sql语句 -->
	<!-- 需求：通过id查询用户表的记录 -->
	<!-- 通过select执行数据库查询
	id:标识映射文件中的sql,将sql语句封装到mappedStatement对象中，
	所以将id称为statement的id.	
	parameterType:指定输入参数的类型，这里指定int型
	#{}表示一个占位符。
	#{id}:其中的id表示接收输入的参数，参数名称就是id，
	如果输入参数是简单类型，#{}中的参数名可以任意，也可以是value或其他名称。
	resultType:指定sql输出结果所映射的java对象类型，
	select指定resultType表示将单条记录映射成的java对象。
	 -->
	<select id="findUserById" parameterType="int" resultType="user">
		select * from user where id=#{id}
	</select>
	
	<!-- 根据用户名称模糊查询用户信息,可能返回多条
	resultType:指定就是单条记录所映射的java对象类型
	${}:表示拼接sql串，将接收到的参数内容不加任何修饰拼接在sql中，
	使用${}拼接sql，要注意两点
	1.${value}：接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value
	2.使用${}拼接sql，会引起sql注入
	 -->
	<select id="findUserByName" parameterType="java.lang.String" 
			resultType="com.zcy.pojo.User" useCache="false">
		select * from user where username like '%${value}%'
	</select>
	
	<!-- 添加用户 
	parameterType:指定输入参数类型是pojo（包括用户信息）
	#{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过ognl获取对象的属性值
	id是自增的，不用特别插入
	-->
	<insert id="insertUser" parameterType="com.zcy.pojo.User"
			flushCache="true">
		<!-- 将插入的主键返回，返回到user对象中
		select last_insert_id():得到刚insert进去记录的主键值，只适用于自增主键
		keyProperty：将查询到主键值设置到parameterType指定的对象的那个属性
		order:select last_insert_id执行顺序，相对于insert语句来说它的执行顺序
		resultType:指定select last_insert_id()的结果类型
		如果不加selectKey的话，user.getId()返回值为0
		-->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			select last_insert_id()
		</selectKey>
		insert into user(username,birthday,sex,address) 
		value(#{username},#{birthday},#{sex},#{address})
	</insert>
	
	<!-- 删除用户
	根据id删除用户，需要输入id值
	-->
	<delete id="deleteUser" parameterType="java.lang.Integer">
		delete from user where id=#{id}
	</delete> 
	
	<!-- 根据id更新用户 
	分析：需要传入用户的id和用户的更新信息
	parameterType指定user对象，包括id和更新信息，注意:id必须存在
	#{id}:从输入user对象中获取id属性值
	-->
	<update id="updateUser" parameterType="com.zcy.pojo.User">
		update user set username=#{username},birthday=#{birthday},
		sex=#{sex},address=#{address} where id=#{id}
	</update>
</mapper>